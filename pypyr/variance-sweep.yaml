# pypyr/variance-sweep.yaml

context_parser: pypyr.parser.keyvaluepairs

steps:
  - name: pypyr.steps.default
    description: "Set default seeds"
    in:
      defaults:
        seeds: [11, 12]

  - name: pypyr.steps.py
    description: "Parse seeds if provided as string"
    in:
      pycode: |
        import ast
        
        print(f"üîç Raw seeds value: {repr(context['seeds'])}")
        print(f"üîç Seeds type: {type(context['seeds'])}")
        
        # Check if seeds is a string (from command line) or already a list (default)
        if isinstance(context['seeds'], str):
            # Parse string like "[42,43,44]" into actual Python list
            try:
                seeds_list = ast.literal_eval(context['seeds'])
                context['seeds'] = seeds_list
                print(f"‚úÖ Parsed seeds from string: {seeds_list}")
            except (ValueError, SyntaxError) as e:
                print(f"‚ùå Error parsing seeds string: {e}")
                print("üí° Use format: seeds='[42,43,44]'")
                raise
        else:
            print(f"‚úÖ Using default seeds: {context['seeds']}")

  - name: pypyr.steps.py
    description: "Backup original params.yaml"
    in:
      pycode: |
        import shutil
        import os
        
        if os.path.exists('params.yaml'):
            shutil.copy('params.yaml', 'params.yaml.backup')
            print("üìã Backed up params.yaml to params.yaml.backup")
        else:
            print("‚ö†Ô∏è  params.yaml not found - nothing to backup")

  - name: pypyr.steps.call
    description: "Process each seed: update params ‚Üí run pipeline"
    foreach: '{seeds}'
    in:
      call: process_seed

process_seed:
  - name: pypyr.steps.py
    description: "Update params.yaml with current seed"
    in:
      pycode: |

        from ruamel.yaml import YAML
        from ruamel.yaml.comments import CommentedMap
        from pathlib import Path
        import tempfile, os

        def set_in(d, path, value):
            """Safely set a nested key path like ['experiment','seed'] even if parts are missing."""
            cur = d
            for k in path[:-1]:
                if k not in cur or not isinstance(cur[k], dict):
                    cur[k] = CommentedMap()
                cur = cur[k]
            cur[path[-1]] = value

        seed = context['i']   # <-- this is just an int (42, 123, ‚Ä¶)
        print(f"\nüîÑ Processing seed: {seed}")

        yaml = YAML(typ="rt")          # round-trip mode
        yaml.preserve_quotes = True
        yaml.indent(mapping=2, sequence=2, offset=0)

        params_path = Path("params.yaml")
        with params_path.open("r", encoding="utf-8") as f:
            params = yaml.load(f)

        # --- Mutations (adjust path if you want seed somewhere else) ---
        set_in(params, ["experiment", "seed"], seed)

        # --- Atomic write ---
        with tempfile.NamedTemporaryFile("w", delete=False, dir=str(params_path.parent), encoding="utf-8") as tf:
            yaml.dump(params, tf)
            tmp_name = tf.name
        os.replace(tmp_name, params_path)

        print(f"üìù Updated params.yaml with seed={seed}")

  - name: pypyr.steps.shell
    description: "Run SDPype pipeline with current seed"
    in:
      cmd: uv run sdpype pipeline
  - name: pypyr.steps.echo
    in:
      echoMe: "‚úÖ Completed seed {i}"

  - name: pypyr.steps.py
    description: "Restore params.yaml"
    in:
      pycode: |
        import shutil
        import os
        
        if os.path.exists('params.yaml.backup'):
            shutil.move('params.yaml.backup', 'params.yaml')
            print("üìã Restored original params.yaml")
        else:
            print("‚ö†Ô∏è  No backup file found")